# This is a basic workflow to help you get started with Actions

name: CI & CD to AWS

# Controls when the workflow will run


on:
  pull_request:
    branches: [main]

#Setup Environmental variables to:
#Be able to loging to AWS for ECR Docker caching using IAM
#Be able to deploy to K8s cluster
#----
#change Release Version to AWS Kubernetes
#---
#Send a notification to Slack
env:
  RELEASE_REVISION: "pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACES: ${{ secrets.KUBE_NAMESPACES }}
  ECR_REPOSITORY: ${{ secrets.PRV_ECR_REPO }}
 # SLACK_WEBHOOK_URL: '${{ secrets.SLACK_WEBHOOK_URL }}

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:
  
jobs:                                            
  release:                                       
    name: Release                                
    runs-on: ubuntu-latest                       
    steps:
    #Cancel Any Running Workflow running
    - name: Cancel Previous Runs               
      uses: styfle/cancel-workflow-action@0.4.1
      with:                                    
        access_token: ${{ github.token }} 
    #Checkout code
    - name: Checkout                                  
      uses: actions/checkout@v2                       
      with:                                           
        ref: ${{ github.event.pull_request.head.sha }}
    #Configure AWS Credentials (IAM full admin role at the moment)
    - name: Configure AWS credentials                          
      uses: aws-actions/configure-aws-credentials@v1           
      with:                                                    
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}        
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR            
      id: login-ecr                        
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.PRV_ECR_REPO }}
        IMAGE_TAG: ${{ env.RELEASE_REVISION }}
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 
        
      
      
#    - name: Set up Docker Buildx                             
#      id: buildx                                             
#      uses: docker/setup-buildx-action@master                
#    - name: Docker cache layers                              
#      uses: actions/cache@v2                                 
#      with:                                                  
#        path: /tmp/.buildx-cache                             
#        key: ${{ runner.os }}-single-buildx-${{ github.sha }}
#        restore-keys: ${{ runner.os }}-single-buildx        
#    - name: Build & Push Image                                                                                      
#      env:                                                                                                          
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}                                                       
#        RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
#      run: |
#        docker buildx create --use       
#        docker buildx build \                                
#        --cache-from=type=local,src=/tmp/.buildx-cache \   
#        --cache-to=type=local,dest=/tmp/.buildx-cache-new \
#        --tag ${{ env.RELEASE_IMAGE }} \                           
#        #--target release \                                 
#        --push \                                           
#        .                                                  
#
#        rm -rf /tmp/.buildx-cache
#        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    
    #Contact via Slack Channel to begin deployment
    
    - name: Deploy to Kubernetes cluster                                                                            
      uses: kodermax/kubectl-aws-eks@master                                                                         
      env:
        KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
      with:                                                                                                         
        args: set image deployment/pleo-payment image=$RELEASE_IMAGE 


    - name: Verify Kubernetes deployment                               
      uses: kodermax/kubectl-aws-eks@master 
      env:                                                                                                          
        KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}   
      with:                                                            

        args: rollout status deploy pleo-payment

